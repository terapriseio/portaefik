services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"      # HTTP port
      - "443:443"    # HTTPS port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock    # Allow Traefik to monitor Docker
      - ./letsencrypt:/letsencrypt                   # Store SSL certificates
    env_file:
      - .env
    command:
      - "--api.dashboard=true"                          # Enable dashboard
      - "--api.insecure=false"                          # Disable insecure dashboard access

      # Docker provider configuration
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"     # Don't expose containers unless explicitly told
      - "--providers.docker.network=proxy"              # Explicitly defines shared network name to proxy
     
      # Define entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      
      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    labels:
      - "traefik.enable=true"
      
      # Dashboard configuration
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=admin-auth"
      - "traefik.http.middlewares.admin-auth.basicauth.users=admin:${HASHED_TRAEFIK_PASSWORD}"
    networks:
      - proxy    # Attach to proxy network
    restart: always

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock    # Allow Portainer to manage Docker
      - portainer_data:/data                         # Persist Portainer data
    env_file:
      - .env
    labels:
      - "traefik.enable=true"                                               # Enable Traefik for this service
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_DOMAIN}`)"   # Route based on domain
      - "traefik.http.routers.portainer.entrypoints=websecure"              # Use Secure Entrypoint
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"       # Use Let's Encrypt
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"     # Internal port
    networks:
      - proxy    # Attach to proxy network
    restart: unless-stopped

volumes:
  portainer_data:    # Named volume for Portainer data

networks:
  proxy:
    name: proxy
    # For the main config file where you define the network (which is this file), use 'external: false' (since it is made in this file)
    # For service configs that use this network, use 'external: true'. Since it will need to make this network we just made.
    external: false